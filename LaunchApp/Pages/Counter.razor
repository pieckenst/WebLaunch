@page "/counter"
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@using Masa.Blazor

<PageTitle>FFXIV Login</PageTitle>

<MContainer>
    <MRow Justify="JustifyTypes.Center">
        <MCol Cols="12" Md="8">
            <MCard Class="rounded-lg" Elevation="4">
                <div class="pa-6">
                    <div class="text-h4 mb-4">FFXIV Login</div>
                    <div class="text-subtitle-1 mb-4">Status: @statusstring</div>

                    <MTextField @bind-Value="usernameinp"
                              Label="Username"
                              Filled
                              Clearable
                              Class="mb-4" />

                    <MTextField @bind-Value="passinp"
                              Label="Password"
                              Type="password"
                              Filled
                              Clearable
                              Class="mb-4" />

                    <MTextField @bind-Value="otpinp"
                              Label="OTP"
                              Filled
                              Clearable
                              Class="mb-4" />

                    @if (!string.IsNullOrEmpty(md5Hash))
                    {
                        <MTextField Value="@md5Hash"
                                  Label="MD5 Hash"
                                  Filled
                                  Readonly
                                  Class="mb-4" />
                    }

                    <div class="d-flex">
                        <MButton Color="primary"
                                OnClick="processinputsx"
                                Class="mr-4 rounded-lg">
                            Login
                        </MButton>
                        <MButton Icon
                                Class="rounded-lg"
                                OnClick="ModalShow">
                            <MIcon>mdi-cog</MIcon>
                        </MButton>
                    </div>
                </div>
            </MCard>
        </MCol>
    </MRow>
</MContainer>

<MDialog @bind-Value="showModal"
         MaxWidth="500"
         Fullscreen
         Transition="dialog-bottom-transition">
    <MCard Class="rounded-lg">
        <div class="pa-4">
            <div class="text-h5 mb-4">Settings</div>
            <MTextField @bind-Value="gamepatherinp"
                       Label="Game Path"
                       Filled
                       Clearable
                       Class="mb-4" />
            <MSwitch @bind-Value="checkedValue"
                    Label="Own game on Steam?"
                    Class="mb-4" />
            <div class="d-flex justify-end">
                <MButton Color="primary"
                         OnClick="ModalOk"
                         Class="mr-2 rounded-lg">
                    Apply
                </MButton>
                <MButton OnClick="ModalCancel"
                         Class="rounded-lg">
                    Cancel
                </MButton>
            </div>
        </div>
    </MCard>
</MDialog>

@code {
    private string statusstring = "Awaiting input";
    private string usernameinp = "";
    private string passinp = "";
    private string otpinp = "";
    private string gamepatherinp = "";
    private string md5Hash = "";
    private bool checkedValue;
    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }

    private async Task<string> EncryptPassword(string password)
    {
        try
        {
            md5Hash = await jsRuntime.InvokeAsync<string>("md5", password);
            Console.WriteLine($"MD5 Hash: {md5Hash}");

            string encryptedPassword = await jsRuntime.InvokeAsync<string>("aesEncrypt", md5Hash, md5Hash, "dalamud");
            Console.WriteLine($"Encrypted Password: {encryptedPassword}");

            return encryptedPassword;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Encryption error: {ex.Message}");
            statusstring = "Encryption failed";
            throw;
        }
    }

    private async Task processinputsx()
    {
        try
        {
            string encryptedPassword = await EncryptPassword(passinp);
            passinp = "";

            string steamParam = checkedValue ? "yes" : "no";
            navigationManager.NavigateTo($"HandleWebRequest:HandleReqLaunch?ffxivhandle=yes?login={usernameinp}:?pass={encryptedPassword}:?otp={otpinp}:?gamepath={gamepatherinp}:?issteam={steamParam}");
            
            statusstring = "Game launched";
        }
        catch
        {
            statusstring = "Launch failed";
        }
    }
}
