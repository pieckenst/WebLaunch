@page "/counter"
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject MasaBlazor MasaBlazor
@using System.Security.Cryptography;
@using AKSoftware.Blazor.Utilities

<PageTitle>FFXIV Login</PageTitle>

<MContainer Fluid>
    <div class="game-header">
    <MImage Src="https://img.finalfantasyxiv.com/lds/h/V/U5TjBZoXVbddg1ZB7H4k0fkYqo.jpg" 
            Height="600" 
            
            Style="position: relative;">
        <div class="header-content d-flex align-center">
            <div class="flex-grow-1">
                <h1 class="text-h2">Final Fantasy XIV</h1>
                <div class="text-subtitle-1">Status: @statusstring</div>
            </div>
            <MSpacer></MSpacer>
            @if (!MasaBlazor.Breakpoint.Mobile)
            {
                <MCard Class="play-card" >
                    <MButton Color="primary"
                            OnClick="processinputsx"
                            XLarge
                            Class="play-button">
                        Play Now
                    </MButton>
                    <MButton Icon
                            Class="settings-button"
                            OnClick="ModalShow">
                        <MIcon>mdi-cog</MIcon>
                    </MButton>
                </MCard>
            }
        </div>
    </MImage>
</div>

    <MRow Class="mt-6">
        <MCol Cols="12" Md="8">
            <MCard Class="pa-6 mb-6">
                <div class="text-h4 mb-4">About Final Fantasy XIV</div>
                <p class="text-body-1">
                    Take part in an epic and ever-changing FINAL FANTASY as you adventure and explore with friends from around the world.
                </p>
            </MCard>

            <MCard Class="pa-6 mb-6">
                <div class="text-h4 mb-4">Available Jobs</div>
                <MRow>
                    <MCol Cols="12" Md="4">
                        <div class="text-h6 mb-2">Tank Roles</div>
                        <MList Dense>
                            <MListItem>
                                <MListItemTitle>Paladin</MListItemTitle>
                            </MListItem>
                            <MListItem>
                                <MListItemTitle>Warrior</MListItemTitle>
                            </MListItem>
                            <MListItem>
                                <MListItemTitle>Dark Knight</MListItemTitle>
                            </MListItem>
                            <MListItem>
                                <MListItemTitle>Gunbreaker</MListItemTitle>
                            </MListItem>
                        </MList>
                    </MCol>
                    <MCol Cols="12" Md="4">
                        <div class="text-h6 mb-2">Healer Roles</div>
                        <MList Dense>
                            <MListItem>
                                <MListItemTitle>White Mage</MListItemTitle>
                            </MListItem>
                            <MListItem>
                                <MListItemTitle>Scholar</MListItemTitle>
                            </MListItem>
                            <MListItem>
                                <MListItemTitle>Astrologian</MListItemTitle>
                            </MListItem>
                            <MListItem>
                                <MListItemTitle>Sage</MListItemTitle>
                            </MListItem>
                        </MList>
                    </MCol>
                    <MCol Cols="12" Md="4">
                        <div class="text-h6 mb-2">DPS Roles</div>
                        <MList Dense>
                            <MListItem>
                                <MListItemTitle>Monk</MListItemTitle>
                            </MListItem>
                            <MListItem>
                                <MListItemTitle>Dragoon</MListItemTitle>
                            </MListItem>
                            <MListItem>
                                <MListItemTitle>Ninja</MListItemTitle>
                            </MListItem>
                            <MListItem>
                                <MListItemTitle>Samurai</MListItemTitle>
                            </MListItem>
                        </MList>
                    </MCol>
                </MRow>
            </MCard>
        </MCol>

        w
    </MRow>
</MContainer>

<MDialog @bind-Value="showModal"
         MaxWidth="500"
         Persistent>
    <MCard>
        <MCardTitle>
            <span class="text-h5">Login Settings</span>
        </MCardTitle>
        <MCardText>
            <MTextField @bind-Value="usernameinp"
                       Label="Username"
                       Filled
                       Clearable
                       Class="mb-4" />

            <MTextField @bind-Value="passinp"
                       Label="Password"
                       Type="password"
                       Filled
                       Clearable
                       Class="mb-4" />

            <MTextField @bind-Value="otpinp"
                       Label="OTP"
                       Filled
                       Clearable
                       Class="mb-4" />

            <MTextField @bind-Value="gamepatherinp"
                       Label="Game Path"
                       Filled
                       Clearable
                       Class="mb-4" />

            <MSwitch @bind-Value="checkedValue"
                    Label="Own game on Steam?"
                    Class="mb-4" />
        </MCardText>
        <MCardActions>
            <MSpacer></MSpacer>
            <MButton Color="primary"
                     OnClick="ModalOk"
                     Class="mr-2">
                Accept
            </MButton>
            <MButton OnClick="ModalCancel">
                Cancel
            </MButton>
        </MCardActions>
    </MCard>
</MDialog>

<style>
    .game-header {
        width: 100vw;
        position: relative;
        left: 50%;
        right: 50%;
        margin-left: -50vw;
        margin-right: -50vw;
        animation: fadeIn 0.5s ease-out forwards;
    }

    .header-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    padding: 2rem;
    color: var(--foreground);
    animation: fadeIn 0.5s ease-out 0.2s forwards;
}

[data-theme="light"] .header-content {
    color: var(--background);
}

    .play-card {
        padding: 1rem;
        background-color: rgb(var(--theme-background-rgb)) !important;
        opacity: 0.9;
        border: 1px solid var(--theme-dividers);
        display: flex;
        gap: 0.5rem;
        animation: fadeIn 0.5s ease-out 0.4s forwards;
        box-shadow: var(--theme-shadow-4);
        transition: background-color 0.3s ease;
    }

    .play-button {
        background: var(--theme-colors-primary);
        color: var(--theme-colors-on-primary);
        font-weight: 500;
    }

    .settings-button {
        border: 1px solid rgba(255,255,255,0.1);
    }

    @@keyframes fadeIn {
        0% {
            opacity: 0;
            transform: translateY(20px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>
@code {
    
    private string statusstring = "Awaiting input";
    private string usernameinp = "";
    private string passinp = "";
    private string otpinp = "";
    private string gamepatherinp = "";
    private string md5Hash = "";
    private bool checkedValue;
    bool showModal = false;

    protected override void OnInitialized()
    {
        var links = new List<(string Text, string Url, string Icon, bool IsActive)>
        {
            ("Overview", "", "", true),
            ("Characters", "characters", "", false),
            ("Shop", "shop", "", false)
        };

        MessagingCenter.Send(this, "update_nav", links);
    }

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }

    

    private async Task<(string encrypted, string hash)> EncryptPassword(string password)
{
    try
    {
        Console.WriteLine("Starting password encryption process");
        
        if (string.IsNullOrEmpty(password))
        {
            throw new ArgumentException("Password cannot be empty");
        }

        Console.WriteLine("Creating hash using SHA256");
        string hash;
        using (var sha256 = System.Security.Cryptography.SHA256.Create())
        {
            byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(password);
            Console.WriteLine($"Input bytes length: {inputBytes.Length}");
            
            byte[] hashBytes = sha256.ComputeHash(inputBytes);
            Console.WriteLine($"Hash bytes length: {hashBytes.Length}");
            
            hash = BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
            Console.WriteLine($"Hash created: {hash}");
        }

        Console.WriteLine("Performing XOR encryption");
        byte[] dataBytes = System.Text.Encoding.UTF8.GetBytes(password);
        byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(hash.Substring(0, 16));
        
        byte[] encryptedBytes = new byte[dataBytes.Length];
        for (int i = 0; i < dataBytes.Length; i++)
        {
            encryptedBytes[i] = (byte)(dataBytes[i] ^ keyBytes[i % keyBytes.Length]);
        }
        
        var result = Convert.ToBase64String(encryptedBytes);
        Console.WriteLine("Encryption completed successfully");
        
        return (result, hash);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Detailed encryption error: {ex.GetType().Name}");
        Console.WriteLine($"Error message: {ex.Message}");
        Console.WriteLine($"Stack trace: {ex.StackTrace}");
        statusstring = $"Encryption failed: {ex.Message}";
        throw;
    }
}









    private async Task processinputsx()
    {
        try
        {
            Console.WriteLine("Starting game launch process...");
            Console.WriteLine($"Username: {usernameinp}, OTP provided: {!string.IsNullOrEmpty(otpinp)}, Steam: {checkedValue}");
            Console.WriteLine($"Game path: {gamepatherinp}");
            Console.WriteLine($"Password provided: {!string.IsNullOrEmpty(passinp)}");

            var (encryptedPassword, hash) = await EncryptPassword(passinp);
            Console.WriteLine("Password encryption completed successfully");
            passinp = "";

            string steamParam = checkedValue ? "yes" : "no";
            Console.WriteLine("Preparing navigation URL...");
            
            string navigationUrl = $"HandleWebRequest:HandleReqLaunch?ffxivhandle=yes?login={usernameinp}:?pass={encryptedPassword}:?hash={hash}:?otp={otpinp}:?gamepath={gamepatherinp}:?issteam={steamParam}";
            Console.WriteLine($"Navigation URL prepared: {navigationUrl}");
            
            navigationManager.NavigateTo(navigationUrl);
            Console.WriteLine("Navigation executed successfully");
            
            statusstring = "Game launched";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during launch process: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            statusstring = $"Launch failed: {ex.Message}";
        }
    }}
