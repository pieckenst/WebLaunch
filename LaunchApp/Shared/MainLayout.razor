@inherits LayoutComponentBase
@inject MasaBlazor MasaBlazor
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable

<MApp>
    <MErrorHandler DisablePopupIfErrorContentRender>
        <ChildContent>
            <MAppBar Id="app-bar"
                     App
                     Class="default-app-bar m-bar--underline"
                     Flat
                     Height="64"
                     Style="left: 0">
                <div Class="hidden-sm-and-down mr-4" style="min-width:264px;">
                    <MAppBarTitle>Game Launcher</MAppBarTitle>
                </div>

                @if (!HideAppBarNavIcon)
                {
                    <MAppBarNavIcon Class="hidden-lg-and-up" />
                }

                <div class="flex-1-1-auto d-flex align-center justify-end ml-4">
                    @if (MasaBlazor.Breakpoint.LgAndUp)
                    {
                        <MButton Href="" Text>
                            <MIcon>mdi-home</MIcon>
                            <span> Home</span>
                        </MButton>
                        <MButton Href="counter" Text>
                            <MIcon>mdi-widgets</MIcon>
                            <span> Final Fantasy XIV</span>
                        </MButton>
                        <MButton Href="spellborn" Text>
                            <MIcon>mdi-gamepad</MIcon>
                            <span> Chronicles of Spellborn</span>
                        </MButton>
                    }

                    @if (MasaBlazor.Breakpoint.XsOnly)
                    {
                        <MSpacer />
                    }

                    <MToggle Value="@MasaBlazor.Theme.Dark"
                             ValueChanged="@(async (v) => {
                                MasaBlazor.ToggleTheme();
                                await JSRuntime.InvokeVoidAsync("switchTheme", MasaBlazor.Theme.Dark);
                            })"
                             DataOn="@("mdi-weather-night")"
                             DataOff="@("mdi-weather-sunny")">
                    </MToggle>
                </div>
            </MAppBar>

            <MMain>
                <MContainer Fluid>
                    @Body
                </MContainer>
            </MMain>

            @if (MasaBlazor.Breakpoint.XsOnly)
            {
                <MBottomNavigation Dark>
                    <MButton Href="">
                        <MIcon>mdi-home</MIcon>
                        <span>Home</span>
                    </MButton>
                    <MButton Href="counter">
                        <MIcon>mdi-storm</MIcon>
                        <span>FFXIV</span>
                    </MButton>
                    <MButton Href="spellborn">
                        <MIcon>mdi-gamepad</MIcon>
                        <span>Spellborn</span>
                    </MButton>
                </MBottomNavigation>
            }
        </ChildContent>
        <ErrorContent>
            <MContainer Class="fill-height justify-center">
                <div style="white-space: pre-wrap; max-width: 100vw;">
                    <h1 class="error--text text-center mb-6">Something went wrong</h1>
                    <p class="error--text" style="font-size: 1rem;">@context.Message</p>
                    <p class="info--text">Try refreshing the page (<kbd>Ctrl+F5</kbd> for Windows, <kbd>Command+Shift+R</kbd> for Mac)</p>
                    <MButton Block
                             Class="text-capitalize"
                             Large
                             Color="primary"
                             OnClick="@(() => Navigation.NavigateTo(Navigation.Uri, true))">
                        Refresh
                    </MButton>
                </div>
            </MContainer>
        </ErrorContent>
    </MErrorHandler>
</MApp>

@code {
    private bool HideAppBarNavIcon { get; set; }
    private DotNetObjectReference<MainLayout>? _objRef;

    protected override async Task OnInitializedAsync()
    {
        _objRef = DotNetObjectReference.Create(this);
        MasaBlazor.MobileChanged += MasaBlazorOnMobileChanged;
        await InitializeTheme();
    }

    private async Task InitializeTheme()
    {
        try
        {
            var isDarkPreferred = await JSRuntime.InvokeAsync<bool>("isDarkMode");
            if (isDarkPreferred != MasaBlazor.Theme.Dark)
            {
                MasaBlazor.ToggleTheme();
                await JSRuntime.InvokeVoidAsync("switchTheme", MasaBlazor.Theme.Dark);
            }
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Theme initialization error: {ex.Message}");
            if (MasaBlazor.Theme.Dark)
            {
                MasaBlazor.ToggleTheme();
                await JSRuntime.InvokeVoidAsync("switchTheme", false);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("switchTheme", MasaBlazor.Theme.Dark);
        }
    }

    private void MasaBlazorOnMobileChanged(object? sender, MobileChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        MasaBlazor.MobileChanged -= MasaBlazorOnMobileChanged;
        _objRef?.Dispose();
    }
}
