@using LumexUI
@using LumexUI.Common
@inherits LayoutComponentBase
@inject MasaBlazor MasaBlazor
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable

<LumexThemeProvider />
<MApp Dark="@MasaBlazor.Theme.Dark">
    <MErrorHandler DisablePopupIfErrorContentRender>
        <ChildContent>
            <LumexNavbar Class="default-app-bar" ShouldHideOnScroll>
                <LumexNavbarContent>
                    <LumexNavbarMenuToggle Class="sm:hidden" />
                    <LumexNavbarBrand Class="ml-4">
                        <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
                            <path clip-rule="evenodd"
                                d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
                                fill="currentColor" />
                        </svg>
                        <span class="font-bold text-xl ml-2">Game Launcher</span>
                    </LumexNavbarBrand>
                </LumexNavbarContent>

                <LumexNavbarContent Class="hidden sm:flex justify-center flex-1">
                    <LumexNavbarItem>
                        <LumexLink Href="" Color="@ThemeColor.None">
                            <MIcon>mdi-home</MIcon>
                            Home
                        </LumexLink>
                    </LumexNavbarItem>
                </LumexNavbarContent>

                <LumexNavbarContent Justify="End">
                    <LumexNavbarItem>
                        <LumexSwitch 
                StartIcon="@LumexUI.Icons.Rounded.LightMode" 
                EndIcon="@LumexUI.Icons.Rounded.DarkMode" 
                Color="@ThemeColor.Danger" 
                Size="@Size.Medium" 
                Value="@MasaBlazor.Theme.Dark"
                ValueChanged="@(async (v) => {
                    MasaBlazor.ToggleTheme();
                    await JSRuntime.InvokeVoidAsync("switchTheme", MasaBlazor.Theme.Dark);
                })">
                Dark Mode
            </LumexSwitch>
                    </LumexNavbarItem>
                    <LumexNavbarItem>
                        <LumexButton Size="@Size.Small" Color="@ThemeColor.Primary" Variant="@Variant.Flat">
                            Launch Game
                        </LumexButton>
                    </LumexNavbarItem>
                </LumexNavbarContent>

                <LumexNavbarMenu Class="sm:hidden">
                    <LumexNavbarMenuItem>
                        <LumexLink Href="" Color="@ThemeColor.None">Home</LumexLink>
                    </LumexNavbarMenuItem>
                </LumexNavbarMenu>
            </LumexNavbar>

            <MMain>
                <MTransition Name="fade-transition">
                    <div class="game-content">
                        @Body
                    </div>
                </MTransition>
            </MMain>
        </ChildContent>
    </MErrorHandler>
</MApp>

<style>
    .game-content {
        min-height: 100vh;
        background-color: var(--theme-background);
        transition: background-color 0.3s ease;
    }

    .default-app-bar {
        border-bottom: 1px solid rgba(255,255,255,0.12);
    }
</style>




@code {
    private DotNetObjectReference<MainLayout>? _objRef;

    protected override async Task OnInitializedAsync()
    {
        _objRef = DotNetObjectReference.Create(this);
        MasaBlazor.MobileChanged += MasaBlazorOnMobileChanged;
        await InitializeTheme();
    }

    private async Task InitializeTheme()
    {
        try
        {
            var isDarkPreferred = await JSRuntime.InvokeAsync<bool>("isDarkMode");
            if (isDarkPreferred != MasaBlazor.Theme.Dark)
            {
                MasaBlazor.ToggleTheme();
                await JSRuntime.InvokeVoidAsync("switchTheme", MasaBlazor.Theme.Dark);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Theme initialization error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("switchTheme", MasaBlazor.Theme.Dark);
        }
    }

    private void MasaBlazorOnMobileChanged(object? sender, MobileChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        MasaBlazor.MobileChanged -= MasaBlazorOnMobileChanged;
        _objRef?.Dispose();
    }
}
