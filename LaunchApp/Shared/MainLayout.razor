@inherits LayoutComponentBase
@inject MasaBlazor MasaBlazor
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable

<MApp Dark="@MasaBlazor.Theme.Dark">
    <MErrorHandler DisablePopupIfErrorContentRender>
        <ChildContent>
            <MAppBar Id="app-bar" App Class="default-app-bar m-bar--underline" Flat Height="64" Style="left: 0">
                <MAppBarTitle>Game Launcher</MAppBarTitle>
                <MSpacer />

                @if (!MasaBlazor.Breakpoint.Mobile)
                {
                    <MButton Href="" Text>
                        <MIcon>mdi-home</MIcon>
                        <span>Home</span>
                    </MButton>
                }

                <MToggle Value="@MasaBlazor.Theme.Dark"
                         ValueChanged="@(async (v) => {
                            MasaBlazor.ToggleTheme();
                            await JSRuntime.InvokeVoidAsync("switchTheme", MasaBlazor.Theme.Dark);
                         })"
                         DataOn="@("mdi-weather-night")"
                         DataOff="@("mdi-weather-sunny")">
                </MToggle>
            </MAppBar>

            <MMain>
                <MTransition Name="fade-transition">
                    <div class="game-content">
                        @Body
                    </div>
                </MTransition>
            </MMain>
        </ChildContent>
    </MErrorHandler>
</MApp>


<style>
    .game-content {
        min-height: 100vh;
        background-color: var(--theme-background);
        transition: background-color 0.3s ease;
    }

    .default-app-bar {
        border-bottom: 1px solid rgba(255,255,255,0.12);
    }
</style>

@code {
    private DotNetObjectReference<MainLayout>? _objRef;

    protected override async Task OnInitializedAsync()
    {
        _objRef = DotNetObjectReference.Create(this);
        MasaBlazor.MobileChanged += MasaBlazorOnMobileChanged;
        await InitializeTheme();
    }

    private async Task InitializeTheme()
    {
        try
        {
            var isDarkPreferred = await JSRuntime.InvokeAsync<bool>("isDarkMode");
            if (isDarkPreferred != MasaBlazor.Theme.Dark)
            {
                MasaBlazor.ToggleTheme();
                await JSRuntime.InvokeVoidAsync("switchTheme", MasaBlazor.Theme.Dark);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Theme initialization error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("switchTheme", MasaBlazor.Theme.Dark);
        }
    }

    private void MasaBlazorOnMobileChanged(object? sender, MobileChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        MasaBlazor.MobileChanged -= MasaBlazorOnMobileChanged;
        _objRef?.Dispose();
    }
}
